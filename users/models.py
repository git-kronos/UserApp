from allauth.socialaccount.models import SocialAccount

from django.db import models
from django.contrib.auth.models import User
from PIL import Image


# from . choices import COUNTRIES
import pycountry
from operator import itemgetter


def country_list():
	country_list = sorted([(country.name, country.name) for country in list(pycountry.countries)], key=itemgetter(0))
	country_list.insert(0, ("Select Country", "Select Country"))

	return country_list


# Create your models here.
class UserProfile(models.Model):
	"""
	Our UserProfile model extends the built-in Django User Model
	"""
	class Meta:
		verbose_name_plural = "User Profiles"
		ordering = ['timestamp']

	updated = models.DateTimeField(auto_now=True)
	timestamp = models.DateTimeField(auto_now_add=True)
	user = models.OneToOneField(User, on_delete=models.CASCADE)
	avatar = models.ImageField(default='default_avatar.png', upload_to='avatar')
	bio = models.CharField(max_length=1000, null=True, blank=True)
	tlephone=models.CharField(max_length=15, null=True, blank=True)
	address=models.CharField(verbose_name="Address", max_length=100, null=True, blank=True)
	town = models.CharField(verbose_name="Town/City", max_length=100, null=True, blank=True)
	county = models.CharField(verbose_name="Town/City", max_length=100, null=True, blank=True)
	post_code = models.CharField(verbose_name="Post Code", max_length=8, null=True, blank=True)
	country = models.CharField(verbose_name="Country", max_length=100, null=True, blank=True, choices=country_list())
	is_active = models.BooleanField(default=True)
	has_profile = models.BooleanField(default=False)
	email_verified = models.BooleanField(default=False)
	two_step_active = models.BooleanField(default=False)
	is_vip = models.BooleanField(default=False) #Used when we add users to system manually.

	captcha_score = models.FloatField(default=0.0)

	def __str__(self)->str:
		return f'{self.user}'

	@property
	def social(self):
		try:
			social = SocialAccount.objects.get(user=self.user)
			return True
		except SocialAccount.DoesNotExist:
			return False


class UserToken(models.Model):
	"""
	Our UserToken model is used to store verification tokens generated by users
	"""
	class Meta:
		verbose_name_plural = "User tokens"

	updated = models.DateTimeField(auto_now=True)
	timestamp = models.DateTimeField(auto_now_add=True)
	user = models.ForeignKey(User, on_delete=models.CASCADE)
	token = models.CharField(max_length=100, null=True, blank=True)
	two_step_code = models.CharField(max_length=6, null=True, blank=True)

	# used to change the object type
	is_email = models.BooleanField(default=False)
	is_password = models.BooleanField(default=False)
	is_sms = models.BooleanField(default=False)
	is_active = models.BooleanField(default=True)

	def __str__(self)->str:
		return f'{self.user}'